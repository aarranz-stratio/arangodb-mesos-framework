///////////////////////////////////////////////////////////////////////////////
/// @brief state of the ArangoDB framework
///
/// @file
///
/// DISCLAIMER
///
/// Copyright 2015 ArangoDB GmbH, Cologne, Germany
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// Copyright holder is ArangoDB GmbH, Cologne, Germany
///
/// @author Dr. Frank Celler
/// @author Copyright 2015, ArangoDB GmbH, Cologne, Germany
////////////////////////////////////////////////////////////////////////////////

#ifndef ARANGO_STATE_H
#define ARANGO_STATE_H 1

#include "arangodb.pb.h"

#include <mutex>

#include <state/protobuf.hpp>

namespace arangodb {

// -----------------------------------------------------------------------------
// --SECTION--                                                       ArangoState
// -----------------------------------------------------------------------------

  class ArangoState {

// -----------------------------------------------------------------------------
// --SECTION--                                      constructors and destructors
// -----------------------------------------------------------------------------

    public:

////////////////////////////////////////////////////////////////////////////////
/// @brief constructor
////////////////////////////////////////////////////////////////////////////////

      ArangoState (const std::string& name, const std::string& zk);

// -----------------------------------------------------------------------------
// --SECTION--                                                    public methods
// -----------------------------------------------------------------------------

    public:

////////////////////////////////////////////////////////////////////////////////
/// @brief initializes the state
////////////////////////////////////////////////////////////////////////////////

      void init ();

////////////////////////////////////////////////////////////////////////////////
/// @brief loads the state
////////////////////////////////////////////////////////////////////////////////

      void load ();

////////////////////////////////////////////////////////////////////////////////
/// @brief removes the state from store
////////////////////////////////////////////////////////////////////////////////

      void destroy ();

////////////////////////////////////////////////////////////////////////////////
/// @brief framework id
////////////////////////////////////////////////////////////////////////////////

      std::string frameworkId ();

////////////////////////////////////////////////////////////////////////////////
/// @brief framework id
////////////////////////////////////////////////////////////////////////////////

      mesos::FrameworkID frameworkId (bool&);

////////////////////////////////////////////////////////////////////////////////
/// @brief sets the framework id
////////////////////////////////////////////////////////////////////////////////

      void setFrameworkId (const mesos::FrameworkID&);

////////////////////////////////////////////////////////////////////////////////
/// @brief returns the target
////////////////////////////////////////////////////////////////////////////////

      Targets targets ();

////////////////////////////////////////////////////////////////////////////////
/// @brief updates the target
////////////////////////////////////////////////////////////////////////////////

      void setTargets (const Targets&);

////////////////////////////////////////////////////////////////////////////////
/// @brief target as json string
////////////////////////////////////////////////////////////////////////////////

      std::string jsonTargets ();

////////////////////////////////////////////////////////////////////////////////
/// @brief returns the plan
////////////////////////////////////////////////////////////////////////////////

      Plan plan ();

////////////////////////////////////////////////////////////////////////////////
/// @brief updates the plan
////////////////////////////////////////////////////////////////////////////////

      void setPlan (const Plan&);

////////////////////////////////////////////////////////////////////////////////
/// @brief plan as json string
////////////////////////////////////////////////////////////////////////////////

      std::string jsonPlan ();

////////////////////////////////////////////////////////////////////////////////
/// @brief returns the current
////////////////////////////////////////////////////////////////////////////////

      Current current ();

////////////////////////////////////////////////////////////////////////////////
/// @brief updates the current
////////////////////////////////////////////////////////////////////////////////

      void setCurrent (const Current&);

////////////////////////////////////////////////////////////////////////////////
/// @brief current as json string
////////////////////////////////////////////////////////////////////////////////

      std::string jsonCurrent ();

////////////////////////////////////////////////////////////////////////////////
/// @brief returns all known TaskStatus
////////////////////////////////////////////////////////////////////////////////

      std::vector<mesos::TaskStatus> knownTaskStatus ();

////////////////////////////////////////////////////////////////////////////////
/// @brief saves the state
////////////////////////////////////////////////////////////////////////////////

      void save ();

// -----------------------------------------------------------------------------
// --SECTION--                                                 private variables
// -----------------------------------------------------------------------------

    private:

////////////////////////////////////////////////////////////////////////////////
/// @brief name of the state for none-zk
////////////////////////////////////////////////////////////////////////////////

      const std::string _name;

////////////////////////////////////////////////////////////////////////////////
/// @brief zk uri
////////////////////////////////////////////////////////////////////////////////

      const std::string _zk;

////////////////////////////////////////////////////////////////////////////////
/// @brief storage for state
////////////////////////////////////////////////////////////////////////////////

      mesos::internal::state::Storage* _storage;

////////////////////////////////////////////////////////////////////////////////
/// @brief state storage 
////////////////////////////////////////////////////////////////////////////////

      mesos::internal::state::State* _stateStore;

////////////////////////////////////////////////////////////////////////////////
/// @brief the state itself
////////////////////////////////////////////////////////////////////////////////

      State _state;

////////////////////////////////////////////////////////////////////////////////
/// @brief mutex for state
////////////////////////////////////////////////////////////////////////////////

      std::mutex _lock;
  };
}

#endif

// -----------------------------------------------------------------------------
// --SECTION--                                                       END-OF-FILE
// -----------------------------------------------------------------------------
